###############################################################################
# EvoMan FrameWork - V1.0 2016  			                                  #
# DEMO : Neuroevolution - Genetic Algorithm  neural network.                  #
# Author: Onim Sarker       			                                      #
# karine.smiras@gmail.com     				                                  #
###############################################################################

# imports framework
import sys

from torch import initial_seed
sys.path.insert(0, 'evoman')
from environment import Environment
from demo_controller import player_controller


# imports other libs
import time
import numpy as np
from math import fabs,sqrt
import glob, os
import random
from deap import base, creator
from deap import tools
from deap import algorithms 

vBestInd258 = [0.127331492088966, 0.7421649617292186, -0.04820840977000884, -0.37385002973382575, -0.6009733225830864, 0.22084872262533728, 1.1142972374855284, 0.11915977607650796, -1.7493529320961092, 1.4683467908331571, -0.3713805215102993, 1.5379702906955368, 0.39935472541796446, 1.0709467691132177, -0.3526255432641954, 0.6405896844286072, 0.17001120261275038, 0.24265506371575984, -1.3143302253556004, -0.6235122813874443, 0.17259777630125092, -0.2967601189998001, 1.1288044354887385, 2.2655235521132693, -1.6961108875991822, -0.3233814953705243, 0.18732079990794692, 1.3459852973170228, -0.41050052530331427, 2.4603207035127106, -1.8604305059778394, -1.387666199770493, -0.03382464154298925, -0.7642219835402713, -1.5903750669705468, 0.42576563196324657, 0.9128553178752792, 1.3944159483026852, -0.4722757026413283, -0.6368604862820083, 1.9111034526484973, 0.14048930987426833, 0.5376209562506825, -0.1332275193250682, -1.885113407589932, -1.927131659337513, -0.6304655314836216, -0.04762592081157417, -1.6532526237105623, 0.5436618993067992, 1.9046126164041877, 1.1035641248875292, 0.1486048281602136, 2.6556238611342415, 0.5328837739518956, 0.6534587006069525, 0.5949831000567818, 1.8987707457142071, -1.1011506407826732, 1.785349038094071, -0.3987797446110196, -0.83376656049974, -1.4595256735451205, -1.5615411536918669, -0.17172826727288548, -1.2148281782477839, -2.5378557026252757, 0.3958046706265199, -0.1545871251356432, -0.3155818639382676, 2.1678103232453863, 0.7128078559100041, -1.7834721226098884, 2.730899400110804, 1.0288498228107075, 0.11645623880939704, 0.6672706414623883, 1.0128883425481376, -3.5070436757264085, 0.13651078816923012, -1.0003746284853285, -0.2030010685375437, -0.6425493095217445, -0.07615862983070196, -2.2503328135743232, -0.27825024058441467, -0.4842386119686226, 0.938003199390053, -1.5780409933795716, 0.04056273698949453, -0.0006022057272573322, -2.127213562000803, 2.3599749708358413, 0.26720038473876406, 2.719660983305426, -0.7835830017017484, 0.7525044498162037, 0.6939101560554011, -0.5379319396772442, 1.9152968259869914, -1.1021348194557854, -0.2755672797729176, -1.7077494160836217, 0.14941723277003005, -0.3337231128564177, 0.4296680177635559, -2.0646930276726345, 2.0584581290039154, -0.6135721018719894, 0.2917349432894394, -2.6292502934774373, 1.0086378303153032, 0.18768912223428885, 1.1281446035136404, 0.3074114204274292, 0.8995559940722566, 1.0641361504698776, -1.852829040571346, 0.4416206942315104, -2.5582797876404486, -0.5484855090538374, 3.0360535037266416, -0.39362418138083194, 0.07599000637420028, 0.6843238826593347, -0.30171796840107695, -2.946060484722894, -0.37468959980501704, 0.7904570968593754, 2.0833142625344285, -0.6396482151105741, -0.42941730613338003, -0.4791464944350523, -1.4218630848525573, -2.702980467432409, -1.289186626145645, 0.45043745983604233, 0.3871572646073238, -0.8934137565742404, 0.770346644013763, -5.335347571653679, 0.6263752985678543, 0.05166227490231534, 0.46301068316645566, -1.587442036539085, 1.8525261350046365, 0.7077026380127398, -0.7256753763522497, -0.7895351724248548, -0.1226287242165478, -1.8804352090600251, -0.4801589520861429, 1.6318987114688277, -0.12475152579245757, 0.4908873101151834, 0.35745748331775273, -1.4181036738708246, -1.0444506621456835, 0.4584416213205278, -0.6370768186277704, -0.5650043549998037, -2.1234120860292784, -0.8280057105653057, -1.8184437800478888, 4.1803061325116095, -0.405522394856046, 2.741789297462487, 0.1692026842070875, 0.6481907834606468, -0.4455760687985667, 0.2721582746321488, 1.4582104978040304, -2.3940509087959967, -0.13482520322347824, 0.5039555509796702, -3.9964341850466267, 0.5310246107330248, -1.4038440719809435, -0.03359759029225462, -0.0624053920569444, 0.8778843384270624, 0.718725463348373, 1.2476940704045254, 1.301371597289204, -1.38393711846598, 1.47488140963761, 4.003504948641369, 0.5211115774732593, 0.22854788292055517, -0.2138550521955349, 1.195714674667201, -1.1379482944434431, 0.2959054567550483, 1.2669859875880989, 5.453943857311298, 2.1304057903577895, -2.1763344375969913, -1.4516115943099805, 0.12109277491966264, 0.8616689920029714, 0.9772634575206769, -0.841462212752161, -1.4864494998924214, -0.8453914003549304, -0.3155794266885408, -2.0426956788582213, 0.02040436438751536, 2.9128273305538555, 0.24219216628252482, -0.22567423868753878, 1.0359533564846575, 1.2525003158911892, -0.6031951251087997, -0.7101809268445747, -2.6740854599446444, 0.6015333934187306, -1.282928866870645, 1.4649217249100337, 2.3915463730518107, 0.14685710857809853, -0.6688603467516061, 0.06988569134706402, 0.49548019654400105, -0.0812785118200603, 0.17586578640928952, -0.009226836310044728, -0.14597995831985805, -0.7747255647137483, -1.0803388189993037, -2.2534443043624317, 0.8867897745920503, -0.0478908677485792, -0.6918030697288273, -0.4682471089953262, 0.744084880556864, -1.9486957108888339, -0.4732220971350001, -0.5414964843702342, 1.1674156257643467, 0.9706968628295494, 2.735239153602678, 1.4499417480955876, -0.17750836530636116, -0.12274939617985581, 0.6611466770465477, -1.6292674862930132, 0.7415036495506226, -0.4607690845293262, 0.11140649968710914, 2.0306798452051247, 0.9522685930245665, -0.393737597087779, 1.6590098244713873, 0.9979887846112933, -0.05070289222365527, -0.7125663054448441, -2.096746552896731, -2.6949570913682623, -1.365192998128928, -0.5537995743181029, -0.8753069794457715, 0.6426018181044941, -0.516434681180101, 0.3127137430587189, 0.7270356939953706]
vBestInd2758 = [-0.0368903681090571, 0.8471118136751641, -0.5952823135891814, 1.569290754545294, -0.13525750489241561, 0.324044092101496, 0.2946491046649865, -1.6386220612896212, 2.171791139335531, 0.11392535644459811, -0.5276771552033186, 0.4688744079610312, -2.0991420873978783, 0.2886759514419003, 3.259522119312636, -0.6329975668389569, 0.39963204053781015, 0.4897566469899357, 0.588081789123096, -2.3646802141569183, -1.3292871735296452, -0.5781759113139433, 0.9782943515141507, 0.5748694422438878, 0.22957162672296327, -0.8733630035421523, -2.9027884137465545, -1.0029461540354634, -1.8883316663102263, -0.33091302973211234, -0.04059820686234672, 0.01666040214947906, 2.01851240447906, -0.4534640114054944, -0.048495974175209566, -2.2684260533148395, 0.5469988174265332, -0.03692080119631802, -0.8516219988731459, 0.23060812827965627, -0.011534483995623734, -1.7350786294710299, -0.5997637588205427, 0.5087824085280912, 2.0818845897476823, -0.3482261605518323, 0.6693699172969105, -0.6324323967035372, 1.4609704090355211, 0.15073597571159963, -1.3079731607611231, -1.0595765466728029, -0.14475941119956937, 1.612173762622147, -0.8576685132737649, -0.4096466158866041, -0.807063239720931, 0.043708634808443, -0.18589885106432913, 0.670348942520939, 0.9343748915229928, -0.5639221659470357, 0.9818432512067778, 0.5538345392572124, 0.9625209263377523, -0.26657050069206156, -0.8000516140188716, -0.9838687296091615, -1.2636265812345093, 0.2937915689492785, 0.5701357732839407, -0.5678959246567793, 1.0647656266819117, -0.6486431462278013, -0.39958378710094045, -0.4799707666943406, -0.5012474577418189, -1.0425921829778084, -0.6517377299148988, 0.932899423367382, -0.21284832562385114, 0.1180611756882678, -0.3553774945789897, -0.9940318590313152, 0.6436070788654396, -0.9810132815812551, -0.975784119516377, 0.6160245435899729, 0.3858677864540926, 0.3065172041160662, 2.160437060325851, 0.041849969428506995, 0.4120803459344358, 0.47609030107393635, -0.4101494926134087, -0.10040392721119762, -0.39326450482045017, 0.5911788288536801, -0.8162949456087825, 0.03773737934754018, 0.5736621849920773, -1.1222875454601289, -1.3095702832718348, 1.2094867766726747, 1.4909292047690663, -0.3647347594521393, -1.0400918081807702, -0.6535969272056767, 0.43061684619012053, -0.2938577268760696, 0.7597946124733888, 0.17296376892199938, 0.4073518319377444, -0.029007525492202646, -0.1689524829813236, -0.28148306096795617, -0.12199566389559413, 1.2521992385729137, -0.14583950612727925, 1.2144926482327123, -2.270236895351852, -0.3800668290315903, 0.8290689941791902, 0.12017334972262272, -0.8742767542130476, 0.3982050983422205, -0.7168577241184018, -0.358666290906984, -0.7626885001484969, -3.9534877625314113, -0.7108531274774372, -0.7362547308531457, -0.38169376869802796, 0.5616847885923952, 0.6201155615664027, 0.997030974260255, 0.43930313490679174, 0.05112702645663286, 0.2604677654798677, 0.902070365635611, -1.0276902296632806, 0.5013953302035865, 0.343754578126364, 0.413968048910633, 0.9367512485147582, -1.5086956079988236, -0.7432914200260554, -0.5832809595324668, 0.555795485561924, 0.6415627033017788, -0.706367358212296, -1.8452473943920324, 1.1733388587598288, -0.9555608034016396, -0.18067911467376452, 0.7074315139321765, -0.691417906886411, -0.008501456406054736, 0.3017488090972802, 0.15405346309962542, -0.6355651017190005, -0.6115103579248891, 0.4200642814417571, -0.6056606329468156, 0.7544594363852613, -1.9322751944254521, 0.9270759195521852, -0.5927071016382355, -1.5499431068580027, -0.28789222100819045, -0.014182760328115052, 0.6425058365624376, -0.546745111607565, -0.5059315599843361, 0.8638366850353836, 0.8681581825133085, -2.4047021949154423, 0.5499224721656684, -0.2053144568448273, -0.9379041165132744, -0.6323932999139743, 0.19634329439013012, 0.36034057170234934, -0.04429506109030723, 1.3789356335676612, 0.06503477877173369, 0.25826604154404553, -2.0759510197104882, 0.13867518170604676, 0.2851162142377349, -1.0066223691969844, -0.9949941013473964, -0.508123844218202, 0.4179520891030237, -0.8196653164737315, -0.38115195484408637, 0.8012020988376707, -0.9913094719228392, -0.613993532053035, -0.16014213138059108, -0.21264771782574687, -1.2739420141959483, 0.6241662562668993, -0.4690025344773987, 0.3447953671252736, -0.7223262868245388, -0.7397794869889347, 0.14443383196906834, -0.7469264787184446, 1.0998763649515508, -0.854556092119878, -0.23996479637492185, 1.9402741347904113, 0.11125135617789583, -0.2108241179477941, -0.7084403236341832, 0.19641152215999313, -0.8393809394134457, 0.8512278350063351, 0.6204703333323576, 0.5600258862900507, 0.903518620049951, 0.6595162965308555, -0.030910091916588833, -3.2309138096540675, 0.3741744915172387, 0.5051112594343805, -0.35049939487868886, 0.43386291600790217, 1.6624240043141731, -0.6049907110269384, -0.3133216488844198, -0.9322643614460406, 0.5820613690644577, -1.235950377867113, -0.7949411866942913, -0.9050182353446814, 0.7802540523073946, -0.17958652605722647, 0.08556108807686469, 1.3241438474178275, 0.2519188409293234, 0.43321518448864405, 1.9119767805371028, -0.7340294221303789, 0.9045281749170204, 0.9565110055373969, 0.41143943061752364, -0.7626044687204958, 0.6986448254170405, 0.7546402814235198, -0.21360435405744976, 0.5425918385091566, 0.17042085084810607, -0.9140013687436828, -0.7841087717115081, -0.2061431014113818, 2.4422094940756147, 1.2060538771001168, 0.5780119537634005, 0.5314990784984326, 1.0189938908606675, -0.06831976616044955, 2.0166655089651764, -0.12512106753143848]
vBestIndIni2578 = [-0.5462153893307082, -2.007992586449829, -0.7912576358967605, -1.2434094661294157, 0.5929511398847154, -2.251974091754828, 0.7707978520248977, -0.7920972432197189, -1.7301101197025752, -0.752568514669598, 2.3281086136717564, 0.4757262660117555, -1.4380625262079607, -0.9013051348769914, -0.16789475755567362, 0.42167459403169594, 1.1709133971652759, -0.37423730215989615, 0.8886053688419719, 0.7767777349336344, 2.6616315697082773, -1.5175704133138552, -0.7110578906323544, 0.8882159225161245, -0.08720262129442952, 0.8369193708851265, 1.379021050773499, 0.3272979741562847, 1.9142277703015962, 1.876645397808129, -1.300892345213315, 0.5500943482493984, 2.6551628043005486, 0.7179651309878867, -0.5852431647630065, 1.0928243102903887, -1.2967654070103638, 0.4411464969149581, 2.01632861661038, 1.3994332869251895, -2.354548109630027, -1.2060214930889677, 0.48690074558647856, 1.8826164452781542, 0.41286346040697985, -0.34475413766502017, -0.36475358537657576, -0.32068859540022676, -0.764640965517974, -0.8937331548738112, 0.6869019500070892, 2.5907305783318946, 0.4968223604638379, 0.13280458542619078, 2.5498115231806744, -0.3893363513009466, 0.44658774673043, 0.5453942743690703, -1.5386561532398995, -0.3506511147558473, -0.08250597984645691, 0.6638936614531161, 0.4139909501514937, -0.5418724931507864, -0.05007523438700684, -1.3844730722329341, -0.773779387818386, -0.9743517685658105, 0.7306615144630768, 0.4358085767426434, -0.6969139213089288, -0.755313123074898, -0.12312588227032203, -0.6339275205938245, 4.249800143651375, -1.741150895124278, 0.7925387468515032, 1.1136146827410893, 1.3288231863196436, -1.4499008042207866, 0.903289806981445, 0.848133441564104, 0.434357873620117, -0.07419919166695577, -0.6138945113089542, -0.8384601193225449, 0.3915558566156927, 3.3668795021351907, 0.5302073791898034, 3.149495981788758, -0.010083539308001543, -0.7308923811622188, 2.4020218107950653, 1.555634352736952, -0.8382211017130159, 0.9835984907885365, 2.055129538190606, 0.2658234939145727, 0.5745138229888583, -0.42162279558579474, -0.195962515034507, 1.2425245012990402, -0.1803231259460814, -3.082173657711432, -0.35596735727585915, 0.10524568323321659, -1.0395743320780073, 1.0072990235190056, -0.03061042777170564, -0.07533566547980919, 1.3727533566451509, -0.892587064588787, 0.12682809495004105, 0.10330005584446261, 3.9602803177471513, -1.0354728648027787, -1.206359630242309, 3.155329586939193, 0.6029936916909022, 2.3194916898525575, 0.10282173290542451, -0.90079830249272, 1.1185498026652594, -1.1960440180827874, -0.46645545716688264, -2.918847142647355, -0.7778156068660138, 4.37678873101993, 2.5089155085649346, -1.1262808605815056, -0.17726365235604202, -0.8261867642463904, -0.47250426153510583, -0.4348479367997486, -0.23443299234025922, -2.8150151748949277, 0.026232056592132458, -0.2892767217491993, 0.5218889344778161, 2.011406289910296, -1.1853254541219813, -0.5741986398496127, -0.21513768277179368, 1.1818682950728923, -0.3262973540328213, -0.771494282525039, 0.23033847493263088, -0.041563972627893464, 0.05763484357002602, 1.1377363959555136, -0.9938577400790988, 3.5667281995786757, -0.033318730653602024, -0.06750048864645153, 2.2961768679326306, 0.01292626173712974, -2.00759257498746, -0.10390321585433171, 0.3215691634889834, 0.8294768485005906, -2.1476973675813498, -0.594183148426267, 0.7032336694049927, -0.5825259231545528, -1.4528400888820254, 0.0034293943295061052, 0.09608842740211176, 0.6530597078475224, -0.5901778922874337, -0.4208519021644344, 1.2298103898847168, 0.5965520491614418, 3.949707228337779, 1.0170503668264617, -0.0711187843996246, 2.2066424934545843, -2.2492720208901513, -1.8947151652353422, -0.12571651465446076, 3.7011202748308696, 0.3989317154582388, -1.935889033790738, 1.4527975815089356, 0.9319810858808489, 0.3590409823307529, 1.798659613781905, -1.7454277843789272, -2.389166634740847, -0.8317945783759895, -1.1226180314319167, 0.26029777408254795, 0.18471770171595892, 0.1837385668439229, 2.7118768463818066, -0.17733734855130145, 1.499993688335779, -0.35043341470551637, 0.662786656634549, -2.3417475095756792, 2.8744910079895827, -1.1459654517858902, -0.7769868281634165, -1.2249037368882532, -0.8471061119969021, 2.1175847040018256, 3.0452422036757145, -2.073615757486602, -1.8500697297271644, -1.0118713249414035, -1.2520777786973825, -0.7742763935348147, 1.1519481910996177, -0.5512149532067854, 0.6847636309633136, -0.8645717333535249, 0.1283481283703427, 0.4767787682389649, 0.4084846799118139, 0.8641474368923706, 2.2280839862106188, 0.281726789103101, -1.0279997882771976, 0.6326637203372771, -0.09451151098012117, -1.0154976351178826, 0.05450759527212301, 0.4089573603897927, -0.3516102425408103, 0.5711141652140629, 1.4507601548018023, -0.11302602818342544, 0.28162188059497195, 1.5980341062935897, -0.09136166544546964, 1.226041513871897, 0.2183742232121717, -1.1659490395985586, -0.023062267074872744, -0.09710927105653389, 0.7961753510098938, -0.8049948701003405, 0.9286090178406119, -0.06104194720662137, 2.2536731724940466, 3.0760882245704355, 1.6800058693775868, -0.87299182095355, -0.30249361013896503, 0.828025445130909, 2.1077037244314836, 0.7278005090380149, 2.433651546040835, -0.7700333743862599, 2.1526869851980717, 0.5619562148762094, -1.510517127449187, 2.4410746613410117, 2.355320719474096, 1.9185992427979186, -0.2998534097812371, -0.4903070943911265, -1.459128891907433, 0.0557432677159459, 1.3509338074283108, -0.028978101800400724]

# choose this for not using visuals and thus making experiments faster
headless = True
if headless:
    os.environ["SDL_VIDEODRIVER"] = "dummy"


experiment_name = 'individual_demo'
if not os.path.exists(experiment_name):
    os.makedirs(experiment_name)

n_hidden_neurons = 10

# initializes simulation in individual evolution mode, for single static enemy.
env = Environment(experiment_name=experiment_name,
                  enemies=[1,2,3,4,5,6,7,8],
                  multiplemode="yes",
                  playermode="ai",
                  player_controller=player_controller(n_hidden_neurons),
                  enemymode="static",
                  level=2,
                  speed="fastest",
                  randomini = 'yes')

#You may notice that i defined env again in this function. This is so we can used the last function in this code called startUpOnePoint()
def deap_specialist_cxOnePoint(experiment_name, enemyNumber,iterationnumber):
    if not os.path.exists(experiment_name):
        os.makedirs(experiment_name)

    if os.path.exists(experiment_name + '/results.csv'):
        os.remove(experiment_name + '/results.csv')

    n_hidden_neurons = 10

    # initializes simulation in individual evolution mode, for single static enemy.
    env = Environment(
        experiment_name=experiment_name,
        enemies=[enemyNumber],
        playermode="ai",
        player_controller=player_controller(n_hidden_neurons),
        enemymode="static",
        level=2,
        speed="fastest",
        randomini = "yes"
    )
    
    main()

# default environment fitness is assumed for experiment

env.state_to_log() # checks environment state


####   Optimization for controller solution (best genotype-weights for phenotype-network): Ganetic Algorihm    ###

ini = time.time()  # sets time marker


# genetic algorithm params

run_mode = 'train' # train or test

# number of weights for multilayer with 10 hidden neurons, I used this in Main 
n_vars = (env.get_num_sensors()+1)*n_hidden_neurons + (n_hidden_neurons+1)*5


def fnInitialize(iPopSize, bCross):
    "initialize objects in DEAP"
    #bCross = True equals using cxBlend for crossover
    creator.create("FitnessMin", base.Fitness, weights=(1.0,))
    creator.create("Individual", list, fitness=creator.FitnessMin)
    toolbox = base.Toolbox()
    toolbox.register("attribute", random.random)
    toolbox.register("attr_float", random.uniform, -1, 1)
    toolbox.register("individual", tools.initRepeat, creator.Individual, toolbox.attribute, n=iPopSize)
    toolbox.register(
            "individual", tools.initRepeat, creator.Individual, toolbox.attr_float, n_vars
        )
    toolbox.register("population", tools.initRepeat, list, toolbox.individual)
    
    #Evaluate the operators 
    if bCross == True:
        toolbox.register('mate', tools.cxBlend, alpha = 0.5)
    else:
        toolbox.register("mate", tools.cxOnePoint)

    #toolbox.register("mutate",  tools.mutFlipBit, indpb=0.7)
    toolbox.register("mutate",  tools.mutGaussian, mu = 0, sigma = 1)
    toolbox.register("select", tools.selTournament, tournsize = 3)
    toolbox.register("evaluate", evaluate)
    toolbox.register("survive", tools.selBest)
    return toolbox
    
    


# runs simulation
def simulation(env,x):
    #I don't really use this. I think we can use it if we want to se it visually
    f,p,e,t = env.play(pcont=x)
    print(p, e)
    return f


def evaluate(pop):
    """
    This function will start a game with one individual from the population

    Args:
        individual (np.ndarray of Floats between -1 and 1): One individual from the population

    Returns:
        Float: Fitness
    """
    vTotalFitness = [] 
    for ind in pop:
        indArray = np.array(ind) 
        f, p, e, t = env.play(pcont=indArray)  # return fitness, self.player.life, self.enemy.life, self.time
        vTotalFitness.append(f)
        print("EVALUATED FITNESS : ", f)
        ind.fitness.values = [f]
    return vTotalFitness


# #def simulation(env,x):
#     f,p,e,t = env.play(pcont=x)
#     #print(f)
#     return f


# #def evaluate(x):
#     x = np.array(x)
#     return np.array(list(map(lambda y: simulation(env,y), x)))




def main(bCross):
    
    #Intial Parameter
    iPopSize = 15
    iNumberTotalGen = 30
    dMutProb = 0.25
    dCrossoverProb = 0.9
    
    toolbox = fnInitialize((env.get_num_sensors()+1)*n_hidden_neurons + (n_hidden_neurons+1)*5, bCross)
    pop = toolbox.population(iPopSize)

    vTotFit = toolbox.evaluate(pop)
    print(vTotFit)
    for ind, fit in zip(pop, vTotFit):   
        ind.fitness.values = [fit]
    print("DONE INITIAL UPDATE POPULATION")
    vGenMean = [] 
    vGenMax = [] 
    vHighestFitness = [] 
        
    #Mating need to figure out a way to keep the population size over the generations the same
    for iG in range(iNumberTotalGen):
        print("Generation Number : ", iG +1)
        offspring = toolbox.survive(pop, iPopSize)
        offspring = list(map(toolbox.clone, offspring))
        #vTotFit = toolbox.evaluate(offspring)
        dHighestFitness = 0 
        #Crossover Need to think about a way to make the probablity of mating high for two individuals with a high fitness
        children = []
        
        for child1, child2 in zip(offspring[::2], offspring[1::2]):
            if random.random() < dCrossoverProb:
                offspring.extend(toolbox.mate(child1, child2))
                del child1.fitness.values
                del child2.fitness.values
                print('PRINT LENGTH OFFSPRING : ', len(offspring))
                #children.extend((child1,child2))
                
        
        
        print("ALL CHILDREN IN ONE GENERATION : ", children)
        print("DONE CROSSOVER")
        #offspring.extend((child for child in children))
        #Mutation
        
        for mutant in offspring:
            if random.random() < dMutProb:
                print("MUTATING")
                toolbox.mutate(mutant, mu = 0, sigma = 1, indpb = 0.5)
                del mutant.fitness.values
        print("DONE MUTATING")
        
        #offspring.extend((child for child in children))
        
    
        #Calculate fitness new generation
        #vChangedInd = [ind for ind in offspring if not ind.fitness.valid]
        vChangedInd = offspring
        #Evaluate new popoulation 
        vTotalFitness = toolbox.evaluate(vChangedInd)
        
        for ind, fit in zip(vChangedInd, vTotalFitness):   
            ind.fitness.values = [fit]
        print("DONE LAST UPDATE POPULATION")
        survivors = toolbox.survive(offspring, iPopSize)
        #survivors = toolbox.survive(offspring, POP_SIZE)
        #print(vChangedInd.fitness[0])
        pop[:] = survivors
        vGenFitness = toolbox.evaluate(pop)
        
        print("MAX FITNESS :",np.amax(vGenFitness), '  Location :', np.argmax(vGenFitness))
        
        if np.amax(vGenFitness) >= dHighestFitness:
            dHighestFitness = np.amax(vGenFitness)
            vBestGene = pop[np.argmax(vGenFitness)]
            
        vHighestFitness.append(np.max(vGenFitness))
        
        vGenMean.append(np.mean(vGenFitness))
        vGenMax.append(np.amax(vGenFitness))
    
    print("************************** BEST INDIVIDUAL GENES*******************************")
    print(vBestGene)
    print("*******************************************************************************")
    #print(vFinalFitness)
    #print(vGenMean)
    #print(vGenMax)
    #return(vFinalFitness, vGenMean, vGenMax)
    print("**************************HIGHEST INDIVIDUAL FITNESS EACH GEN*******************************")
    print(vHighestFitness)
    print("*******************************************************************************")
    
    return (vGenMean, vGenMax, vBestGene)

def fnTrials():
    # Initialise matrix for cxBlend
    mBestGenesBlend = [] 
    mGenMeanBlend = [] 
    mGenMaxBlend = [] 
    # Initialise matrix for cxOnePoint    
    mBestGenesOnePoint = [] 
    mGenMeanOnePoint = [] 
    mGenMaxOnePoint = [] 
    for i in range(1, 11):
        # 10 Trials for cxBlend
        vGenMeanBlend, vGenMaxBlend, vBestGeneBlend = main(True)
        mBestGenesBlend.append(vBestGeneBlend)
        mGenMeanBlend.append(vGenMeanBlend)
        mGenMaxBlend.append(vGenMaxBlend)
        # 10 Trials for cxOnePoint        
        vGenMeanOnePoint, vGenMaxOnePoint, vBestGeneOnePoint = main(False)
        mBestGenesOnePoint.append(vBestGeneOnePoint)
        mGenMeanOnePoint.append(vGenMeanOnePoint)
        mGenMaxOnePoint.append(vGenMaxOnePoint)
    return (mBestGenesBlend, mGenMeanBlend, mGenMaxBlend, mBestGenesOnePoint, mGenMeanOnePoint, mGenMaxOnePoint)
        
